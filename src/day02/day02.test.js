const part1 = require('./part1');
const part2 = require('./part2');
const solution = require('./solution');

describe('Day 2 Part 1', () => {
  it.each([
    [[1, 0, 0, 0, 99], [2, 0, 0, 0, 99]],
    [[2, 3, 0, 3, 99], [2, 3, 0, 6, 99]],
    [[2, 4, 4, 5, 99, 0], [2, 4, 4, 5, 99, 9801]],
    [[1, 1, 1, 4, 99, 5, 6, 0, 99], [30, 1, 1, 4, 2, 5, 6, 0, 99]],
    [[1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50], [3500, 9, 10, 70, 2, 3, 11, 0, 99, 30, 40, 50]]])(
    'intcode program %s becomes %s', (n, expected) => {
      expect(part1.runIntcodeProgram(n)).toStrictEqual(expected);
    },
  );

  test('1,0,0,0,99 with instructions of [1, 0, 0, 0] becomes 2,0,0,0,99', () => {
    expect(part1.processInstruction([1, 0, 0, 0, 99], [1, 0, 0, 0]))
      .toStrictEqual([2, 0, 0, 0, 99]);
  });

  test('2,3,0,3,99 with instructions of [2, 3, 0, 3] becomes 2,3,0,6,99', () => {
    expect(part1.processInstruction([2, 3, 0, 3, 99], [2, 3, 0, 3]))
      .toStrictEqual([2, 3, 0, 6, 99]);
  });

  test('Solution is 6627023', () => {
    expect(solution.solvePart1().split(',')[0]).toBe('6627023');
  });

  // eslint-disable-next-line max-len
  test('Final program for solution is 6627023,12,2,2,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,36,1,9,19,39,1,23,5,40,2,27,10,160,1,6,31,162,1,6,35,164,2,9,39,492,1,6,43,494,1,47,5,495,1,51,13,500,1,55,13,505,1,59,5,506,2,63,6,1012,1,5,67,1013,1,71,13,1018,1,10,75,1022,2,79,6,2044,2,9,83,6132,1,5,87,6133,1,91,5,6134,2,9,95,18402,1,6,99,18404,1,9,103,18407,2,9,107,55221,1,111,6,55223,2,9,115,165669,1,119,6,165671,1,123,9,165674,2,127,13,828370,1,131,9,828373,1,10,135,828377,2,139,10,3313508,1,143,5,3313509,2,147,6,6627018,1,151,5,6627019,1,2,155,6627021,1,6,159,0,99,2,0,14,0', () => {
    // eslint-disable-next-line max-len
    expect(solution.solvePart1()).toBe('6627023,12,2,2,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,36,1,9,19,39,1,23,5,40,2,27,10,160,1,6,31,162,1,6,35,164,2,9,39,492,1,6,43,494,1,47,5,495,1,51,13,500,1,55,13,505,1,59,5,506,2,63,6,1012,1,5,67,1013,1,71,13,1018,1,10,75,1022,2,79,6,2044,2,9,83,6132,1,5,87,6133,1,91,5,6134,2,9,95,18402,1,6,99,18404,1,9,103,18407,2,9,107,55221,1,111,6,55223,2,9,115,165669,1,119,6,165671,1,123,9,165674,2,127,13,828370,1,131,9,828373,1,10,135,828377,2,139,10,3313508,1,143,5,3313509,2,147,6,6627018,1,151,5,6627019,1,2,155,6627021,1,6,159,0,99,2,0,14,0');
  });
});

describe('Day 2 Part 1', () => {
  test('calculateGravityAssist returns empty array if it cant find the answer', () => {
    expect(part2.calculateGravityAssist([2, 3, 0, 3, 99])).toStrictEqual([]);
  });

  test('Solution is 4019', () => {
    expect(solution.solvePart2()).toStrictEqual(4019);
  });
});
